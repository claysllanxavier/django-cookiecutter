/// Página inicial da APP.

/// [Travar o arquivo]
/// Caso deseje "travar" o arquivo para não ser parseado novamente
/// pelo manage do Django adicione um # antes da palavra abaixo
/// FileLocked

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:connectivity/connectivity.dart';
import 'apps/configuracao/cubit.dart';
import 'user_interface/widget.dart';
import 'utils/config.dart';
import 'utils/localization.dart';
import 'dart:async';
import 'package:flutter/scheduler.dart';

$ImportViews$

class MyHomePage extends StatefulWidget {
  MyHomePage({Key key, this.title}) : super(key: key);
  final String title;

  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  bool bottomNavigationEnable = true;
  int _currentIndexPage;


  // Declarando o inteiro para controlar qual página deve ser exibida
  int _indexCurrentPage;

  // Declarando uma instancia da Classe dos items do Menu
  final Itens _itensMenuGridView = Itens();

  @override
  void initState() {
    super.initState();
    _currentIndexPage = 0;
    SchedulerBinding.instance.addPostFrameCallback(
      (_) {
        _itensMenuGridView.make();
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async {
        return false;
      },
      child: Scaffold(
        body: IndexedStack(
          index: _currentIndexPage,
        ),
        bottomNavigationBar: _buildCupertinoTabScaffold(context),
      ),
    );
  }

  /// Componente de navegação CupertinoTabScaffold
  Widget _buildCupertinoTabScaffold(BuildContext context) {
    return CupertinoTabScaffold(
      tabBar: CupertinoTabBar(
        items: [
          BottomNavigationBarItem(icon: Icon(Icons.home), label: "Principal"),
          BottomNavigationBarItem(icon: Icon(Icons.settings), label: "Configurações"),
        ],
      ),
      tabBuilder: (context, index) {
        switch (index) {
          case 0:
            return CupertinoTabView(
              builder: (context) {
                return CupertinoPageScaffold(child: _buildGridView(context));
              },
            );
            break;
          case 1:
            return CupertinoTabView(
              builder: (context) {
                return CupertinoPageScaffold(child: SettingsIndexPage());
              },
            );
            break;
          default:
            return Container();
        }
      },
    );
  }

  Widget _buildGridView(BuildContext context) {
    return Stack(children: <Widget>[
      HeadWidget(),
      ContentWidget(
        widgetChild: GridView.count(
          crossAxisCount: 2,
          children: List.generate(_itensMenuGridView.list.length, (index) {
            return Center(
              child: GestureDetector(
                onTap: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) =>
                          _itensMenuGridView.list[index].geturi(),
                    ),
                  );
                },
                child: BlocConsumer<SettingsCubit, SettingsState>(
                  listener: (context, state){},
                  builder:
                      (context, state) {
                    return customMainCardButton(
                      _itensMenuGridView.list[index].icon,
                      _itensMenuGridView.list[index].title,
                      iconColor: context.watch<SettingsCubit>().lightTheme == true
                          ? CustomTheme.mainCardLightIconColor
                          : CustomTheme.mainCardDarkIconColor,
                      textColor: context.watch<SettingsCubit>().lightTheme == true
                          ? CustomTheme.mainCardLightTextColor
                          : CustomTheme.mainCardDarkTextColor,
                      cardBackgroundColorBegin:
                          context.watch<SettingsCubit>().lightTheme == true
                              ? CustomTheme.mainCardLightBackgroundColor
                              : CustomTheme.mainCardDarkBackgroundColor,
                      cardBackgroundColorEnd:
                          context.watch<SettingsCubit>().lightTheme == true
                              ? CustomTheme.mainCardLightBackgroundColor
                              : CustomTheme.mainCardDarkBackgroundColor,
                      boxShadowColor: context.watch<SettingsCubit>().lightTheme == true
                          ? CustomTheme.mainCardLightShadowColor
                          : CustomTheme.mainCardDarkShadowColor,
                      cardBorderColor: context.watch<SettingsCubit>().lightTheme == true
                          ? CustomTheme.mainCardLightBackgroundColor
                          : CustomTheme.mainCardDarkBackgroundColor,
                    );
                  },
                ),
              ),
            );
          }),
        ),
      )
    ]);
  }
}

class Itens {
  final String title;
  final IconData icon;
  final Widget uri;
  final Image imageIcon;

  Itens({this.title, this.icon, this.uri, this.imageIcon});

  List<Itens> list = [];

  void make() {
    // Exemplo de inserção de uma imagem do Assets como Card
    // list.add(Itens(
    //     title: 'arquivo importacao',
    //     icon: null,
    //     imageIcon: Image.asset("assets/icons/icons8-calendar-500.png",
    //         width: MediaQuery.of(context).size.width / 4, color: Colors.red),
    //     uri: Container()));

    $ItenMenu$
  }

  Widget geturi() => uri;
}
