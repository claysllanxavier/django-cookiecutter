import 'dart:convert';
import 'package:dio/dio.dart';
import 'package:flutter/material.dart';

import '../../utils/config.dart';
import '../../utils/util.dart';
import '../../utils/custom_dio.dart';

import 'model.dart';

class AuthService {
  AuthModel auth = AuthModel();

  Future<void> signUpUser(int typeUser) async {
    String _uri = "";
    switch (typeUser) {
      case 0:
        _uri = "${Config.uri}usuario/cliente/";
        break;
      default:
        _uri = "${Config.uri}usuario/profissional/";
    }
    try {
      final CustomDio _dio = CustomDio(_uri);
      FormData _data = FormData.fromMap({
        "cpf": auth.cpf,
        "nome": auth.name,
        "email": auth.email,
        "telefone": auth.phoneNumber,
        "password": auth.password,
        "firebase": auth.firebaseId
      });
      final data = await _dio.postHttp(_data, uri: _uri);
      if (data != null) {
        _success("Usuário criado com sucesso", statusCode: Process.statusCode);
      }
    } catch (e, exception) {
      _error(e.toString(), exception.toString());
    }
  }

  Future<void> signUpUserFirebase(String url) async {
    try {
      final CustomDio _dio = CustomDio(url);
      var _dataPost = json.encode({
        'email': auth.email,
        'password': auth.password,
        'returnSecureToken': true
      });
      final data = await _dio.postHttp(_dataPost, uri: url);
      if (data != null) {
        auth.firebaseId = data['localId'];
        signUpUser(0);
      }
    } catch (e, exception) {
      _error(e.toString(), exception.toString());
    }
  }

  Future<AuthModel> signIn(String login, String password) async {
    String _uri = "${Config.uriAuth}token/";
    AuthModel _authModel = AuthModel();
    try {
      CustomDio _dio = CustomDio(_uri);
      FormData _data =
          FormData.fromMap({"username": login, "password": password});
      var dataResponse = await _dio.postHttp(_data, uri: _uri);
      if (dataResponse != null) {
        _authModel.token = dataResponse['access'];
        _success("Usuário logado com sucesso", statusCode: 200);
      }
    } catch (error, exception) {
      _error(error.toString(), exception.toString());
    }
    return _authModel;
  }

  Future<int> checkDjangoUserTypeClient(String login) async {
    String _uri = "${Config.uri}usuario/cliente/?email=$login";
    try {
      CustomDio _dio = CustomDio(_uri);
      var dataResponse = await _dio.getHttp(uri: _uri);
      if (dataResponse != null) {
        if (dataResponse["count"] != 0) {
          return 0;
        }
        return 1;
      }
    } catch (error, exception) {
      _error(error.toString(), exception.toString());
    }
    return null;
  }

  Future<AuthModel> login(AuthModel auth) async {
     String _uri = "${Config.uriAuth}";
    try {
      CustomDio _dio = CustomDio(_uri);
      final _data = json.encode({"username": auth.login, "password": auth.password});
      final userType = await checkDjangoUserTypeClient(auth.login);
      var dataResponse = await _dio.postHttp(_data, uri: _uri);
      if (dataResponse != null && userType != null) {
        final authData = AuthData();
        auth.token = dataResponse['access'];
        final djangoUser = await signInDjangoUser(auth.login, userType);
        if (djangoUser != null) {
          // Verificando o tipo do usuário
          auth.id = djangoUser.id;
          auth.cpf = djangoUser.cpf;
          auth.uuid = djangoUser.id;
          auth.name = djangoUser.nome;
          auth.login = djangoUser.email;
          auth.email = djangoUser.email;
          auth.address = djangoUser.enderecoRes;
          auth.photoUrl = djangoUser.foto;
          auth.firebase = djangoUser.firebase;
          auth.phoneNumber = djangoUser.telefone;
          auth.typeUser = userType;
          authData.save(auth);
          return auth;
        } else {
          return null;
        }
      } else {
        return null;
      }
    } catch (error) {
      throw (error);
    }
  }

  Future<bool> logout() async {
    String _url = "";
    try {
      final CustomDio _dio = CustomDio(_url);
      final data = await _dio.getHttp();
      if (data != null) {
        return true;
      }
    } catch (error, exception) {
      _error(error.toString(), exception.toString());
    }
    return false;
  }

  Future<bool> changePassword() async {
    String _url = "";
    try {
      final CustomDio _dio = CustomDio(_url);
      final data = await _dio.getHttp();
      if (data != null) {
        return true;
      }
    } catch (error, exception) {
      _error(error.toString(), exception.toString());
    }
    return false;
  }

  Future<bool> recoverPassword() async {
    String _url = "";
    try {
      final CustomDio _dio = CustomDio(_url);
      final data = await _dio.getHttp();
      if (data != null) {
        return true;
      }
    } catch (error, exception) {
      _error(error.toString(), exception.toString());
    }
    return false;
  }

  Future<AuthModel> createAccount() async {
    String _url = "";
    try {
      final CustomDio _dio = CustomDio(_url);
      final data = await _dio.getHttp();
      if (data != null) {
        return AuthModel.fromMap(data);
      }
    } catch (error, exception) {
      _error(error.toString(), exception.toString());
    }
    return null;
  }

  Future<bool> disableAccount() async {
    String _url = "";
    try {
      final CustomDio _dio = CustomDio(_url);
      final data = await _dio.getHttp();
      if (data != null) {
        return true;
      }
    } catch (error, exception) {
      _error(error.toString(), exception.toString());
    }
    return false;
  }

  Future<bool> excludeAccount() async {
    String _url = "";
    try {
      final CustomDio _dio = CustomDio(_url);
      final data = await _dio.getHttp();
      if (data != null) {
        return true;
      }
    } catch (error, exception) {
      _error(error.toString(), exception.toString());
    }
    return false;
  }


    void _success(String message, {int statusCode}) async {
    try {
      debugPrint("DebugSuccess: AuthService -> $message, Status: $statusCode");
    } catch (e) {
      _error("$e", "");
    }
  }

  void _error(String error, String exception, {int statusCode}) async {
    try {
      debugPrint(
          "DebugErro: AuthService -> $error | $exception");
    } catch (error) {
      debugPrint(
          "DebugErro: AuthService ->$error");
    }
  }
}
