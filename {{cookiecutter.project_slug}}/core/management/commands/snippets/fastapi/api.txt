from typing import Any, List

from fastapi import APIRouter, Body, Depends, HTTPException
from sqlalchemy.orm import Session

from core.database import get_db
from authentication import security

from $app$ import schemas, cruds

router = APIRouter()

router_$model$ = APIRouter(
    prefix="/$model$",
    tags=['$model$'],
    dependencies=[Depends(security.get_current_active_user)]
)


@router_$model$.get(
    "/", 
    response_model=List[schemas.$ModelClass$], 
    dependencies=[Depends(security.has_permission("$app$.view_$model$"))]
)
def read_$model$s(
    db: Session = Depends(get_db),
    skip: int = 0,
    limit: int = 25
) -> Any:
    """
    Retrieve $model$s.
    """
    $model$s = cruds.$model$.get_multi(db, skip=skip, limit=limit)
    return $model$s


@router_$model$.post("/", response_model=schemas.$ModelClass$, dependencies=[Depends(security.has_permission("$app$.add_$model$"))])
def create_$model$(
    *,
    db: Session = Depends(get_db),
    $model$_in: schemas.$ModelClass$Create,
) -> Any:
    """
    Create new $model$.
    """
    $model$ = cruds.$model$.create(db, obj_in=$model$_in)
    return $model$


@router_$model$.get("/{$model$_id}", response_model=schemas.$ModelClass$, dependencies=[Depends(security.has_permission("$app$.view_$model$"))])
def read_$model$_by_id(
    $model$_id: str,
    db: Session = Depends(get_db)
) -> Any:
    """
    Get a specific $model$ by id.
    """
    $model$ = cruds.$model$.get(db, id=$model$_id)
    if not $model$:
      raise HTTPException(
          status_code=404,
          detail="Esse $model$ não existe no sistema",
      )
    return $model$


@router_$model$.put("/{$model$_id}", response_model=schemas.$ModelClass$, dependencies=[Depends(security.has_permission("$app$.change_$model$"))])
def update_$model$(
    *,
    db: Session = Depends(get_db),
    $model$_id: str,
    $model$_in: schemas.$ModelClass$Update
) -> Any:
    """
    Update a $model$.
    """
    $model$ = cruds.$model$.get(db, id=$model$_id)
    if not $model$:
        raise HTTPException(
            status_code=404,
            detail="Esse $model$ não existe no sistema",
        )
    $model$ = cruds.$model$.update(db, db_obj=$model$, obj_in=$model$_in)
    return $model$

@router_$model$.delete("/{id}", response_model=schemas.$ModelClass$, dependencies=[Depends(security.has_permission("$app$.delete_$model$"))])
def delete_$model$(
    *,
    db: Session = Depends(get_db),
    id: str
) -> Any:
    """
    Delete an note.
    """
    $model$ = cruds.$model$.get(db=db, id=id)
    if not $model$:
      raise HTTPException(
        status_code=404,
        detail="Esse $model$ não existe no sistema",
      )
    $model$ = cruds.$model$.remove(db=db, id=id)
    return $model$


router.include_router(router_$model$)