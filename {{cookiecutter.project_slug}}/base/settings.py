"""
Django settings for {{ cookiecutter.project_slug }} project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import sys
from datetime import timedelta

import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration
from django.conf import settings
from decouple import config, Csv

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

SECRET_KEY = config('SECRET_KEY')

# TODO Mover esse conteúdo para o arquivo .env criado para utilizar o python-decouple
ALLOWED_HOSTS = ['{{ cookiecutter.domain_name }}', ]

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core',
    'usuario',
    # Django Rest Framework
    'drf_yasg',
    'dj_rest_auth',
    'rest_framework',
    'rest_framework.authtoken',
    # Apps do projeto
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_currentuser.middleware.ThreadLocalUserMiddleware',
]

ROOT_URLCONF = 'base.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'base.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': config('DB_ENGINE'),
        'NAME': config('DB_NAME'),
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': config('DB_HOST'),
        'PORT': '5432',
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


LANGUAGE_CODE = 'pt-BR'
TIME_ZONE = 'America/Sao_Paulo'
USE_I18N = True
USE_L10N = True
USE_TZ = True

DECIMAL_SEPARATOR = ','
USE_THOUSAND_SEPARATOR = True

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

PROJECT_NAME = "{{ cookiecutter.project_name }}"

# Lista de apps que devem ser mapeadas para gerar a documentação via Sphinxs
# TODO Adicionar na documentação de uso do Framework a parte de geração da documentação com o Sphinxs
DOC_APPS = ['usuario', ]

try:
    from base.settings_local import *
except:
    pass

# Desativando as migrações quando estiver executando os testes.
if 'test' in sys.argv:
    class DisableMigrations(object):

        def __contains__(self, item):
            return True

        def __getitem__(self, item):
            return None

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'TEST': {
                'NAME': 'test.sqlite3'
            }
        }
    }

    MIGRATION_MODULES = DisableMigrations()

if DEBUG:
    INSTALLED_APPS.append('django_extensions')
    # Adicionando o debug tool bar no middleware
    MIDDLEWARE.append('debug_toolbar.middleware.DebugToolbarMiddleware')
    # MIDDLEWARE.append('silk.middleware.SilkyMiddleware')
    # Adicionando o debug tool bar no installed apps
    INSTALLED_APPS.append('debug_toolbar')
    # INSTALLED_APPS.append('silk')
    # Configurando o debug tool bar para mapear os eventos do localhost
    INTERNAL_IPS = [
        '127.0.0.1', 'localhost'
    ]

# Django Rest Framework
REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework_rapidjson.renderers.RapidJSONRenderer',
    ),
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework_rapidjson.parsers.RapidJSONParser',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 200
}

# DRF JWT
SIMPLE_JWT = {
    # Configurando para o Token expirar de hora em hora
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    # Configurando para o Refresh Token expirar a cada dia.
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
}

# ÁREA PARA CONFIGURAÇÃO DAS VARIÁVEIS DO PROJETO

SYSTEM_NAME = '{{ cookiecutter.project_name.title() }} '

LOGIN_URL = '/core/login'
LOGIN_REDIRECT_URL = '/core'
LOGOUT_REDIRECT_URL = '/core/login'

"""
Variável responsável por configurar qual Manager utilizar. 
Se for True usa o manager padrão que retorna todos os  elementos mesmo os marcados com deleted = True e enabled = True 
Se for False usa o manager configurado para não mostrar os elementos marcados com deleted = True e enabled = False
"""
USE_DEFAULT_MANAGER = False

# O Valor dessa variável não deve ser alterado
FLUTTER_PROJECT_PATH = "../../Flutter/"

# TODO Adicione na lista abaixo as apps que devem ser renderizadas no projeto Flutter
FLUTTER_APPS = ['usuario', ]

# TODO Configure o caminho da API no arquivo .env criado para utilizar o Python Decouple
API_PATH = config('API_PATH')

# TODO Configurar o dsn do Sentry no arquivo .env criado para utilizar o Python Decouple
if DEBUG is False:
    sentry_sdk.init(
        dsn=config('SENTRY_DNS'),  # Exemplo: https://path_dsn
        integrations=[DjangoIntegration()],
        traces_sample_rate=1.0,
        send_default_pii=True
    )
